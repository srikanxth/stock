# -*- coding: utf-8 -*-
"""nm- com

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f0OLVtqkzB_sST0YZUM3Mlg7VF39Sd15
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt


df = pd.read_csv('/content/dataset.csv')
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
df.set_index('Date', inplace=True)


df = df.fillna(method='ffill').drop_duplicates()


lower, upper = df['Volume'].quantile([0.01, 0.99])
df['Volume'] = np.clip(df['Volume'], lower, upper)


df['MA7'] = df['Close'].rolling(window=7).mean()
df['MA21'] = df['Close'].rolling(window=21).mean()
df['Daily_Return'] = df['Close'].pct_change()
df['Day'] = df.index.day
df['Month'] = df.index.month
df['Weekday'] = df.index.weekday
df.dropna(inplace=True)


features = ['Open', 'High', 'Low', 'Close', 'Volume', 'MA7', 'MA21', 'Daily_Return']
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(df[features])
scaled_df = pd.DataFrame(scaled_features, index=df.index, columns=features)


X = scaled_df[:-1].values
y = scaled_df['Close'].values[1:]


X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)


rf = RandomForestRegressor()
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)


print("Random Forest Evaluation:")
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_rf)))
print("MAE:", mean_absolute_error(y_test, y_pred_rf))
print("R² Score:", r2_score(y_test, y_pred_rf))


X_lstm = np.reshape(X, (X.shape[0], 1, X.shape[1]))
X_train_lstm, X_test_lstm = X_lstm[:len(X_train)], X_lstm[len(X_train):]

model = Sequential([
    LSTM(50, return_sequences=False, input_shape=(1, X.shape[1])),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train_lstm, y_train, epochs=10, batch_size=32, verbose=1)


y_pred_lstm = model.predict(X_test_lstm)


print("\nLSTM Evaluation:")
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_lstm)))
print("MAE:", mean_absolute_error(y_test, y_pred_lstm))
print("R² Score:", r2_score(y_test, y_pred_lstm))


plt.figure(figsize=(12, 6))
plt.plot(y_test, label='Actual')
plt.plot(y_pred_rf, label='Random Forest')
plt.plot(y_pred_lstm, label='LSTM')
plt.legend()
plt.title("Model Predictions vs Actual")
plt.xlabel("Time")
plt.ylabel("Normalized Close Price")
plt.show()